//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        
        result[0] = findBound(nums, target, true);
        result[1] = findBound(nums, target, false);
        
        return result;
    }
    
    private int findBound(int[] nums, int target, boolean first){
        int l = 0; 
        int r = nums.length -1;
        
        while(l <= r){
            int mid = (l+r+1)/2;
            if(nums[mid] == target && first && (mid == 0 || nums[mid-1] != target)){
                return mid;
            }
            else if(nums[mid] == target && !first && (mid == (nums.length -1) || nums[mid+1] != target)){
                return mid;
            }
            else if(nums[mid] >= target && first){
                r = mid -1;
            }
            else if(nums[mid] < target && first){
                l = mid+1;
            }
            else if(nums[mid] <= target && !first){
                l = mid +1;
            }
            else if(nums[mid] > target && !first){
                r = mid-1;
            }  
        }
        return -1;
    }
}
